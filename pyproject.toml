[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "raw2l1"
authors = [{ name = "Marc-Antoine Drouin", email = "ccres-dev@listes.ipsl.fr" }]
maintainers = [{ name = "All the contributors" }]
description = "A package to convert raw data from LIDAR to netCDF"
keywords = ["netCDF", "ALC", "LIDAR", "e-profile"]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: GPLv3 License",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = ["gitpython", "netCDF4", "numpy<2", "xarray"]

[project.optional-dependencies]
dev = ["pre-commit", "pytest", "pytest-cov", "release-version", "ruff"]
docs = [
    "ablog",
    "numpydoc",
    "myst-nb",
    "sphinx",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-design",
    "sphinx-examples",
    "sphinx-copybutton",
    "sphinx-serve",
    "sphinx-tabs",
    "sphinx-togglebutton",
    "sphinx-thebe",
    "sphinxcontrib-bibtex",
    "sphinxcontrib-youtube",
    "sphinxext-opengraph",
]

[project.scripts]
raw2l1 = "raw2l1.raw2l1:cli"

[project.urls]
homepage = "https://github.com/ACTRIS-CCRES/raw2l1"
documentation = "https://raw2l1/en/latest/?version=latest"
repository = "https://github.com/ACTRIS-CCRES/raw2l1"
changelog = "https://github.com/ACTRIS-CCRES/raw2l1/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/ACTRIS-CCRES/raw2l1/issues"

[tool.release-version]
filename = "src/raw2l1/version.py"
pattern = [
    "MAJOR = (?P<major>\\d+)",
    "MINOR = (?P<minor>\\d+)",
    "PATCH = (?P<patch>\\d+)",
]
changelog = "CHANGELOG.md"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=. --cov-config=pyproject.toml -vv --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-report term"
testpaths = ["tests"]
filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore::DeprecationWarning",
    "ignore::FutureWarning",
    "default:::raw2l1.*",
]

[tool.coverage.run]
branch = true
omit = ["./tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.ruff]
line-length = 88
indent-width = 4

target-version = "py312"

exclude = ["docs"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",    # missing types, use mypy for this
    "C9",     # too complex, fix me later
    "COM812", # Formatting
    "D100",   # allow missing documentation
    "D101",   # allow missing documentation
    "D102",   # allow missing documentation
    "D103",   # allow missing documentation
    "D104",   # allow missing documentation
    "D105",   # allow missing documentation
    "D106",   # allow missing documentation
    "D107",   # allow missing documentation
    "D205",   # allow long multi-line summary
    "D211",   # conflicting documentation rule
    "D213",   # conflicting documentation rule
    "DTZ00",  # do not check timezone info
    "FBT001", # Boolean default positional argument in function
    "FBT002", # Boolean default positional argument in function
    "FIX002", # TODOs
    "ISC001", # Formatter wants me
    "N8",     # uppercase variable names
    "PERF",   # try except in loop
    "PLR",    # too many arguments etc.
    "RUF002", # unicode in doc string
    "TD002",  # TODOs
    "TD003",  # TODOs
    "PGH003", # rule for type ignore
]
fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
known-first-party = ["raw2l1"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests...
    "ARG",    # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",    # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "INP001", # implicit namespace
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.mypy]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["matplotlib.*", "mpl_toolkits.*", "netCDF4.*", "scipy.*", "xarray.*"]
ignore_missing_imports = true

[tool.bumpversion]
current_version = "3.2.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = true
commit = true
message = "build(bump version): {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "src/raw2l1/version.py"

[[tool.bumpversion.files]]
filename = "docs/source/conf.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"
ignore_missing_version = true
