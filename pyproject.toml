[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "raw2l1"
authors = [{ name = "Marc-Antoine Drouin", email = "ccres-dev@listes.ipsl.fr" }]
maintainers = [{ name = "All the contributors" }]
description = "A package to convert raw data from LIDAR to netCDF"
keywords = ["netCDF", "ALC", "LIDAR", "e-profile"]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: GPLv3 License",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = ["gitpython", "netCDF4", "numpy<2", "xarray"]

[project.optional-dependencies]
dev = ["pre-commit", "pytest", "pytest-cov", "ruff"]
docs = ["myst-parser", "sphinx", "pydata-sphinx-theme"]

[project.urls]
homepage = "https://github.com/ACTRIS-CCRES/raw2l1"
documentation = "https://raw2l1/en/latest/?version=latest"
repository = "https://github.com/ACTRIS-CCRES/raw2l1"
changelog = "https://github.com/ACTRIS-CCRES/raw2l1/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/ACTRIS-CCRES/raw2l1/issues"

[tool.release-version]
filename = "src/raw2l1/version.py"
pattern = [
    "MAJOR = (?P<major>\\d+)",
    "MINOR = (?P<minor>\\d+)",
    "PATCH = (?P<patch>\\d+)",
]
changelog = "CHANGELOG.md"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=. --cov-config=pyproject.toml -vv --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-report term"
testpaths = ["tests"]
filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore::DeprecationWarning",
    "ignore::FutureWarning",
    "default:::ccres_disdrometer_processing.*",
]

[tool.coverage.run]
branch = true
omit = ["./tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.ruff]
line-length = 88
indent-width = 4

target-version = "py311"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes. "E" + "W" + "F" + "C90" (mccabe complexity) is equivalent to flake8
    "I", # isort
]
ignore = []

fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "numpy"
